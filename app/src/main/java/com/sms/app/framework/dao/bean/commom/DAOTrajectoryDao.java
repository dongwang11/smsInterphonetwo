package com.sms.app.framework.dao.bean.commom;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sms.app.framework.dao.bean.DAOPoint;
import com.sms.app.framework.dao.bean.DAOUser;

import com.sms.app.framework.dao.bean.DAOTrajectory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOTRAJECTORY".
*/
public class DAOTrajectoryDao extends AbstractDao<DAOTrajectory, Long> {

    public static final String TABLENAME = "DAOTRAJECTORY";

    /**
     * Properties of entity DAOTrajectory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Remote_id = new Property(1, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Version = new Property(2, long.class, "version", false, "VERSION");
        public final static Property Status = new Property(3, byte.class, "status", false, "STATUS");
        public final static Property Poit_num = new Property(4, int.class, "poit_num", false, "POIT_NUM");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property StartPId = new Property(6, long.class, "startPId", false, "START_PID");
        public final static Property Length = new Property(7, double.class, "length", false, "LENGTH");
        public final static Property EndPId = new Property(8, long.class, "endPId", false, "END_PID");
        public final static Property Used_time_s = new Property(9, int.class, "used_time_s", false, "USED_TIME_S");
        public final static Property Date = new Property(10, java.util.Date.class, "date", false, "DATE");
        public final static Property UserId = new Property(11, long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<DAOTrajectory> dAOUser_TrajectoriesQuery;

    public DAOTrajectoryDao(DaoConfig config) {
        super(config);
    }
    
    public DAOTrajectoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOTRAJECTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 1: remote_id
                "\"VERSION\" INTEGER NOT NULL ," + // 2: version
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"POIT_NUM\" INTEGER NOT NULL ," + // 4: poit_num
                "\"NAME\" TEXT," + // 5: name
                "\"START_PID\" INTEGER NOT NULL ," + // 6: startPId
                "\"LENGTH\" REAL NOT NULL ," + // 7: length
                "\"END_PID\" INTEGER NOT NULL ," + // 8: endPId
                "\"USED_TIME_S\" INTEGER NOT NULL ," + // 9: used_time_s
                "\"DATE\" INTEGER," + // 10: date
                "\"USER_ID\" INTEGER NOT NULL );"); // 11: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOTRAJECTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOTrajectory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindLong(3, entity.getVersion());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getPoit_num());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getStartPId());
        stmt.bindDouble(8, entity.getLength());
        stmt.bindLong(9, entity.getEndPId());
        stmt.bindLong(10, entity.getUsed_time_s());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
        stmt.bindLong(12, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOTrajectory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindLong(3, entity.getVersion());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getPoit_num());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getStartPId());
        stmt.bindDouble(8, entity.getLength());
        stmt.bindLong(9, entity.getEndPId());
        stmt.bindLong(10, entity.getUsed_time_s());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
        stmt.bindLong(12, entity.getUserId());
    }

    @Override
    protected final void attachEntity(DAOTrajectory entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOTrajectory readEntity(Cursor cursor, int offset) {
        DAOTrajectory entity = new DAOTrajectory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // remote_id
            cursor.getLong(offset + 2), // version
            (byte) cursor.getShort(offset + 3), // status
            cursor.getInt(offset + 4), // poit_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getLong(offset + 6), // startPId
            cursor.getDouble(offset + 7), // length
            cursor.getLong(offset + 8), // endPId
            cursor.getInt(offset + 9), // used_time_s
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // date
            cursor.getLong(offset + 11) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOTrajectory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemote_id(cursor.getLong(offset + 1));
        entity.setVersion(cursor.getLong(offset + 2));
        entity.setStatus((byte) cursor.getShort(offset + 3));
        entity.setPoit_num(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartPId(cursor.getLong(offset + 6));
        entity.setLength(cursor.getDouble(offset + 7));
        entity.setEndPId(cursor.getLong(offset + 8));
        entity.setUsed_time_s(cursor.getInt(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUserId(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOTrajectory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOTrajectory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOTrajectory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "trajectories" to-many relationship of DAOUser. */
    public List<DAOTrajectory> _queryDAOUser_Trajectories(long userId) {
        synchronized (this) {
            if (dAOUser_TrajectoriesQuery == null) {
                QueryBuilder<DAOTrajectory> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                dAOUser_TrajectoriesQuery = queryBuilder.build();
            }
        }
        Query<DAOTrajectory> query = dAOUser_TrajectoriesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDAOPointDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDAOPointDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getDAOUserDao().getAllColumns());
            builder.append(" FROM DAOTRAJECTORY T");
            builder.append(" LEFT JOIN DAOPOINT T0 ON T.\"START_PID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DAOPOINT T1 ON T.\"END_PID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN DAOUSER T2 ON T.\"USER_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DAOTrajectory loadCurrentDeep(Cursor cursor, boolean lock) {
        DAOTrajectory entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DAOPoint start_DAO_point = loadCurrentOther(daoSession.getDAOPointDao(), cursor, offset);
         if(start_DAO_point != null) {
            entity.setStart_DAO_point(start_DAO_point);
        }
        offset += daoSession.getDAOPointDao().getAllColumns().length;

        DAOPoint end_DAO_point = loadCurrentOther(daoSession.getDAOPointDao(), cursor, offset);
         if(end_DAO_point != null) {
            entity.setEnd_DAO_point(end_DAO_point);
        }
        offset += daoSession.getDAOPointDao().getAllColumns().length;

        DAOUser user = loadCurrentOther(daoSession.getDAOUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public DAOTrajectory loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DAOTrajectory> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DAOTrajectory> list = new ArrayList<DAOTrajectory>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DAOTrajectory> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DAOTrajectory> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
