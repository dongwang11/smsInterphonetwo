package com.sms.app.framework.dao.bean.commom;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sms.app.framework.dao.bean.DAOmember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOMEMBER".
*/
public class DAOmemberDao extends AbstractDao<DAOmember, Long> {

    public static final String TABLENAME = "DAOMEMBER";

    /**
     * Properties of entity DAOmember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, long.class, "user_id", false, "USER_ID");
        public final static Property Avatar_url = new Property(2, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property User_name = new Property(3, String.class, "user_name", false, "USER_NAME");
        public final static Property Group_name = new Property(4, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Sex = new Property(5, byte.class, "sex", false, "SEX");
        public final static Property Version = new Property(6, long.class, "version", false, "VERSION");
    }


    public DAOmemberDao(DaoConfig config) {
        super(config);
    }
    
    public DAOmemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOMEMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"AVATAR_URL\" TEXT," + // 2: avatar_url
                "\"USER_NAME\" TEXT," + // 3: user_name
                "\"GROUP_NAME\" TEXT," + // 4: group_name
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"VERSION\" INTEGER NOT NULL );"); // 6: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOMEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOmember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(5, group_name);
        }
        stmt.bindLong(6, entity.getSex());
        stmt.bindLong(7, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOmember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(5, group_name);
        }
        stmt.bindLong(6, entity.getSex());
        stmt.bindLong(7, entity.getVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOmember readEntity(Cursor cursor, int offset) {
        DAOmember entity = new DAOmember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // group_name
            (byte) cursor.getShort(offset + 5), // sex
            cursor.getLong(offset + 6) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOmember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getLong(offset + 1));
        entity.setAvatar_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroup_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex((byte) cursor.getShort(offset + 5));
        entity.setVersion(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOmember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOmember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOmember entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
