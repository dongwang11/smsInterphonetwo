package com.sms.app.framework.dao.bean.commom;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sms.app.framework.dao.bean.DAOGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOGROUP".
*/
public class DAOGroupDao extends AbstractDao<DAOGroup, Long> {

    public static final String TABLENAME = "DAOGROUP";

    /**
     * Properties of entity DAOGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Version = new Property(2, long.class, "version", false, "VERSION");
        public final static Property Remote_id = new Property(3, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Is_avtive = new Property(4, boolean.class, "is_avtive", false, "IS_AVTIVE");
        public final static Property GroupId = new Property(5, long.class, "groupId", false, "GROUP_ID");
    }

    private DaoSession daoSession;

    private Query<DAOGroup> dAOUser_GroupsQuery;

    public DAOGroupDao(DaoConfig config) {
        super(config);
    }
    
    public DAOGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOGROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"VERSION\" INTEGER NOT NULL ," + // 2: version
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 3: remote_id
                "\"IS_AVTIVE\" INTEGER NOT NULL ," + // 4: is_avtive
                "\"GROUP_ID\" INTEGER NOT NULL );"); // 5: groupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOGROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getVersion());
        stmt.bindLong(4, entity.getRemote_id());
        stmt.bindLong(5, entity.getIs_avtive() ? 1L: 0L);
        stmt.bindLong(6, entity.getGroupId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getVersion());
        stmt.bindLong(4, entity.getRemote_id());
        stmt.bindLong(5, entity.getIs_avtive() ? 1L: 0L);
        stmt.bindLong(6, entity.getGroupId());
    }

    @Override
    protected final void attachEntity(DAOGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOGroup readEntity(Cursor cursor, int offset) {
        DAOGroup entity = new DAOGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // version
            cursor.getLong(offset + 3), // remote_id
            cursor.getShort(offset + 4) != 0, // is_avtive
            cursor.getLong(offset + 5) // groupId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOGroup entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.getLong(offset + 2));
        entity.setRemote_id(cursor.getLong(offset + 3));
        entity.setIs_avtive(cursor.getShort(offset + 4) != 0);
        entity.setGroupId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOGroup entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOGroup entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOGroup entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "groups" to-many relationship of DAOUser. */
    public List<DAOGroup> _queryDAOUser_Groups(long groupId) {
        synchronized (this) {
            if (dAOUser_GroupsQuery == null) {
                QueryBuilder<DAOGroup> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GroupId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                dAOUser_GroupsQuery = queryBuilder.build();
            }
        }
        Query<DAOGroup> query = dAOUser_GroupsQuery.forCurrentThread();
        query.setParameter(0, groupId);
        return query.list();
    }

}
