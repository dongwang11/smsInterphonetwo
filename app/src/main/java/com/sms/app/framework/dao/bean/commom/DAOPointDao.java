package com.sms.app.framework.dao.bean.commom;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sms.app.framework.dao.bean.DAOTrajectory;

import com.sms.app.framework.dao.bean.DAOPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOPOINT".
*/
public class DAOPointDao extends AbstractDao<DAOPoint, Long> {

    public static final String TABLENAME = "DAOPOINT";

    /**
     * Properties of entity DAOPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Remote_id = new Property(1, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Direction = new Property(2, double.class, "direction", false, "DIRECTION");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, double.class, "latitude", false, "LATITUDE");
        public final static Property Speex = new Property(5, double.class, "speex", false, "SPEEX");
        public final static Property Altitude = new Property(6, double.class, "altitude", false, "ALTITUDE");
        public final static Property TrajectoryId = new Property(7, long.class, "trajectoryId", false, "TRAJECTORY_ID");
        public final static Property Pcreate_time = new Property(8, java.util.Date.class, "pcreate_time", false, "PCREATE_TIME");
    }

    private DaoSession daoSession;

    private Query<DAOPoint> dAOTrajectory_PointsQuery;

    public DAOPointDao(DaoConfig config) {
        super(config);
    }
    
    public DAOPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOPOINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 1: remote_id
                "\"DIRECTION\" REAL NOT NULL ," + // 2: direction
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 4: latitude
                "\"SPEEX\" REAL NOT NULL ," + // 5: speex
                "\"ALTITUDE\" REAL NOT NULL ," + // 6: altitude
                "\"TRAJECTORY_ID\" INTEGER NOT NULL ," + // 7: trajectoryId
                "\"PCREATE_TIME\" INTEGER);"); // 8: pcreate_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOPOINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindDouble(3, entity.getDirection());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getSpeex());
        stmt.bindDouble(7, entity.getAltitude());
        stmt.bindLong(8, entity.getTrajectoryId());
 
        java.util.Date pcreate_time = entity.getPcreate_time();
        if (pcreate_time != null) {
            stmt.bindLong(9, pcreate_time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindDouble(3, entity.getDirection());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getSpeex());
        stmt.bindDouble(7, entity.getAltitude());
        stmt.bindLong(8, entity.getTrajectoryId());
 
        java.util.Date pcreate_time = entity.getPcreate_time();
        if (pcreate_time != null) {
            stmt.bindLong(9, pcreate_time.getTime());
        }
    }

    @Override
    protected final void attachEntity(DAOPoint entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOPoint readEntity(Cursor cursor, int offset) {
        DAOPoint entity = new DAOPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // remote_id
            cursor.getDouble(offset + 2), // direction
            cursor.getDouble(offset + 3), // longitude
            cursor.getDouble(offset + 4), // latitude
            cursor.getDouble(offset + 5), // speex
            cursor.getDouble(offset + 6), // altitude
            cursor.getLong(offset + 7), // trajectoryId
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // pcreate_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOPoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemote_id(cursor.getLong(offset + 1));
        entity.setDirection(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setSpeex(cursor.getDouble(offset + 5));
        entity.setAltitude(cursor.getDouble(offset + 6));
        entity.setTrajectoryId(cursor.getLong(offset + 7));
        entity.setPcreate_time(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOPoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "points" to-many relationship of DAOTrajectory. */
    public List<DAOPoint> _queryDAOTrajectory_Points(long trajectoryId) {
        synchronized (this) {
            if (dAOTrajectory_PointsQuery == null) {
                QueryBuilder<DAOPoint> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrajectoryId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                dAOTrajectory_PointsQuery = queryBuilder.build();
            }
        }
        Query<DAOPoint> query = dAOTrajectory_PointsQuery.forCurrentThread();
        query.setParameter(0, trajectoryId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDAOTrajectoryDao().getAllColumns());
            builder.append(" FROM DAOPOINT T");
            builder.append(" LEFT JOIN DAOTRAJECTORY T0 ON T.\"TRAJECTORY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DAOPoint loadCurrentDeep(Cursor cursor, boolean lock) {
        DAOPoint entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DAOTrajectory trajectory = loadCurrentOther(daoSession.getDAOTrajectoryDao(), cursor, offset);
         if(trajectory != null) {
            entity.setTrajectory(trajectory);
        }

        return entity;    
    }

    public DAOPoint loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DAOPoint> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DAOPoint> list = new ArrayList<DAOPoint>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DAOPoint> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DAOPoint> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
