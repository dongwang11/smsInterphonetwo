package com.sms.app.framework.dao.bean.commom;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sms.app.framework.dao.bean.DAOUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOUSER".
*/
public class DAOUserDao extends AbstractDao<DAOUser, Long> {

    public static final String TABLENAME = "DAOUSER";

    /**
     * Properties of entity DAOUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Remote_id = new Property(1, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Avatar_url = new Property(2, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Version = new Property(3, long.class, "version", false, "VERSION");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Register_time = new Property(5, java.util.Date.class, "register_time", false, "REGISTER_TIME");
        public final static Property Last_login_time = new Property(6, java.util.Date.class, "last_login_time", false, "LAST_LOGIN_TIME");
        public final static Property Sex = new Property(7, byte.class, "sex", false, "SEX");
        public final static Property Number = new Property(8, String.class, "number", false, "NUMBER");
        public final static Property E_mail = new Property(9, String.class, "e_mail", false, "E_MAIL");
        public final static Property Dev_type_bmp = new Property(10, long.class, "dev_type_bmp", false, "DEV_TYPE_BMP");
    }

    private DaoSession daoSession;


    public DAOUserDao(DaoConfig config) {
        super(config);
    }
    
    public DAOUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOUSER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 1: remote_id
                "\"AVATAR_URL\" TEXT," + // 2: avatar_url
                "\"VERSION\" INTEGER NOT NULL ," + // 3: version
                "\"NAME\" TEXT," + // 4: name
                "\"REGISTER_TIME\" INTEGER," + // 5: register_time
                "\"LAST_LOGIN_TIME\" INTEGER," + // 6: last_login_time
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"NUMBER\" TEXT," + // 8: number
                "\"E_MAIL\" TEXT," + // 9: e_mail
                "\"DEV_TYPE_BMP\" INTEGER NOT NULL );"); // 10: dev_type_bmp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
        stmt.bindLong(4, entity.getVersion());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        java.util.Date register_time = entity.getRegister_time();
        if (register_time != null) {
            stmt.bindLong(6, register_time.getTime());
        }
 
        java.util.Date last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindLong(7, last_login_time.getTime());
        }
        stmt.bindLong(8, entity.getSex());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(9, number);
        }
 
        String e_mail = entity.getE_mail();
        if (e_mail != null) {
            stmt.bindString(10, e_mail);
        }
        stmt.bindLong(11, entity.getDev_type_bmp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
        stmt.bindLong(4, entity.getVersion());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        java.util.Date register_time = entity.getRegister_time();
        if (register_time != null) {
            stmt.bindLong(6, register_time.getTime());
        }
 
        java.util.Date last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindLong(7, last_login_time.getTime());
        }
        stmt.bindLong(8, entity.getSex());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(9, number);
        }
 
        String e_mail = entity.getE_mail();
        if (e_mail != null) {
            stmt.bindString(10, e_mail);
        }
        stmt.bindLong(11, entity.getDev_type_bmp());
    }

    @Override
    protected final void attachEntity(DAOUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOUser readEntity(Cursor cursor, int offset) {
        DAOUser entity = new DAOUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // remote_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar_url
            cursor.getLong(offset + 3), // version
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // register_time
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // last_login_time
            (byte) cursor.getShort(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // number
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // e_mail
            cursor.getLong(offset + 10) // dev_type_bmp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemote_id(cursor.getLong(offset + 1));
        entity.setAvatar_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegister_time(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setLast_login_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSex((byte) cursor.getShort(offset + 7));
        entity.setNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setE_mail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDev_type_bmp(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
