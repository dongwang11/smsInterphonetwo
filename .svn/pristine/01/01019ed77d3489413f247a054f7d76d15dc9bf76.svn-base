package com.sms.app.framework.dao.bean.commom;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sms.app.framework.dao.bean.DAOGroup;

import com.sms.app.framework.dao.bean.DAOFriend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOFRIEND".
*/
public class DAOFriendDao extends AbstractDao<DAOFriend, Long> {

    public static final String TABLENAME = "DAOFRIEND";

    /**
     * Properties of entity DAOFriend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, long.class, "version", false, "VERSION");
        public final static Property Remote_id = new Property(2, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Avatar_url = new Property(4, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Gid = new Property(5, long.class, "gid", false, "GID");
        public final static Property Enter_time = new Property(6, java.util.Date.class, "enter_time", false, "ENTER_TIME");
    }

    private DaoSession daoSession;

    private Query<DAOFriend> dAOGroup_FriendsQuery;

    public DAOFriendDao(DaoConfig config) {
        super(config);
    }
    
    public DAOFriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOFRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VERSION\" INTEGER NOT NULL ," + // 1: version
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 2: remote_id
                "\"NAME\" TEXT," + // 3: name
                "\"AVATAR_URL\" TEXT," + // 4: avatar_url
                "\"GID\" INTEGER NOT NULL ," + // 5: gid
                "\"ENTER_TIME\" INTEGER);"); // 6: enter_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOFRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOFriend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
        stmt.bindLong(3, entity.getRemote_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
        stmt.bindLong(6, entity.getGid());
 
        java.util.Date enter_time = entity.getEnter_time();
        if (enter_time != null) {
            stmt.bindLong(7, enter_time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOFriend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
        stmt.bindLong(3, entity.getRemote_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
        stmt.bindLong(6, entity.getGid());
 
        java.util.Date enter_time = entity.getEnter_time();
        if (enter_time != null) {
            stmt.bindLong(7, enter_time.getTime());
        }
    }

    @Override
    protected final void attachEntity(DAOFriend entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOFriend readEntity(Cursor cursor, int offset) {
        DAOFriend entity = new DAOFriend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // version
            cursor.getLong(offset + 2), // remote_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar_url
            cursor.getLong(offset + 5), // gid
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // enter_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOFriend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.getLong(offset + 1));
        entity.setRemote_id(cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGid(cursor.getLong(offset + 5));
        entity.setEnter_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOFriend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOFriend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOFriend entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "friends" to-many relationship of DAOGroup. */
    public List<DAOFriend> _queryDAOGroup_Friends(long gid) {
        synchronized (this) {
            if (dAOGroup_FriendsQuery == null) {
                QueryBuilder<DAOFriend> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gid.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                dAOGroup_FriendsQuery = queryBuilder.build();
            }
        }
        Query<DAOFriend> query = dAOGroup_FriendsQuery.forCurrentThread();
        query.setParameter(0, gid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDAOGroupDao().getAllColumns());
            builder.append(" FROM DAOFRIEND T");
            builder.append(" LEFT JOIN DAOGROUP T0 ON T.\"GID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DAOFriend loadCurrentDeep(Cursor cursor, boolean lock) {
        DAOFriend entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DAOGroup group = loadCurrentOther(daoSession.getDAOGroupDao(), cursor, offset);
         if(group != null) {
            entity.setGroup(group);
        }

        return entity;    
    }

    public DAOFriend loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DAOFriend> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DAOFriend> list = new ArrayList<DAOFriend>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DAOFriend> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DAOFriend> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
