package com.sms.app.framework.dao.bean.commom;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sms.app.framework.dao.bean.DAOGroup;

import com.sms.app.framework.dao.bean.DAOMesg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAOMESG".
*/
public class DAOMesgDao extends AbstractDao<DAOMesg, Long> {

    public static final String TABLENAME = "DAOMESG";

    /**
     * Properties of entity DAOMesg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From_id = new Property(1, long.class, "from_id", false, "FROM_ID");
        public final static Property User_id = new Property(2, long.class, "user_id", false, "USER_ID");
        public final static Property Create_time = new Property(3, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Content_length = new Property(4, int.class, "content_length", false, "CONTENT_LENGTH");
        public final static Property Mesg_type = new Property(5, byte.class, "mesg_type", false, "MESG_TYPE");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Mgid = new Property(7, long.class, "mgid", false, "MGID");
    }

    private DaoSession daoSession;

    private Query<DAOMesg> dAOGroup_MesgsQuery;

    public DAOMesgDao(DaoConfig config) {
        super(config);
    }
    
    public DAOMesgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAOMESG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FROM_ID\" INTEGER NOT NULL ," + // 1: from_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: user_id
                "\"CREATE_TIME\" INTEGER," + // 3: create_time
                "\"CONTENT_LENGTH\" INTEGER NOT NULL ," + // 4: content_length
                "\"MESG_TYPE\" INTEGER NOT NULL ," + // 5: mesg_type
                "\"CONTENT\" TEXT," + // 6: content
                "\"MGID\" INTEGER NOT NULL );"); // 7: mgid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAOMESG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAOMesg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFrom_id());
        stmt.bindLong(3, entity.getUser_id());
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(4, create_time.getTime());
        }
        stmt.bindLong(5, entity.getContent_length());
        stmt.bindLong(6, entity.getMesg_type());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getMgid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAOMesg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFrom_id());
        stmt.bindLong(3, entity.getUser_id());
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(4, create_time.getTime());
        }
        stmt.bindLong(5, entity.getContent_length());
        stmt.bindLong(6, entity.getMesg_type());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getMgid());
    }

    @Override
    protected final void attachEntity(DAOMesg entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAOMesg readEntity(Cursor cursor, int offset) {
        DAOMesg entity = new DAOMesg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // from_id
            cursor.getLong(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // create_time
            cursor.getInt(offset + 4), // content_length
            (byte) cursor.getShort(offset + 5), // mesg_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.getLong(offset + 7) // mgid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAOMesg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom_id(cursor.getLong(offset + 1));
        entity.setUser_id(cursor.getLong(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setContent_length(cursor.getInt(offset + 4));
        entity.setMesg_type((byte) cursor.getShort(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMgid(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAOMesg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAOMesg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAOMesg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mesgs" to-many relationship of DAOGroup. */
    public List<DAOMesg> _queryDAOGroup_Mesgs(long mgid) {
        synchronized (this) {
            if (dAOGroup_MesgsQuery == null) {
                QueryBuilder<DAOMesg> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Mgid.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                dAOGroup_MesgsQuery = queryBuilder.build();
            }
        }
        Query<DAOMesg> query = dAOGroup_MesgsQuery.forCurrentThread();
        query.setParameter(0, mgid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDAOGroupDao().getAllColumns());
            builder.append(" FROM DAOMESG T");
            builder.append(" LEFT JOIN DAOGROUP T0 ON T.\"FROM_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DAOMesg loadCurrentDeep(Cursor cursor, boolean lock) {
        DAOMesg entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DAOGroup group = loadCurrentOther(daoSession.getDAOGroupDao(), cursor, offset);
         if(group != null) {
            entity.setGroup(group);
        }

        return entity;    
    }

    public DAOMesg loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DAOMesg> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DAOMesg> list = new ArrayList<DAOMesg>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DAOMesg> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DAOMesg> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
